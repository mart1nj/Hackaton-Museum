// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Open.Sentry.Data;

namespace Open.Sentry.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Open.Data.Money.CurrencyData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Definition");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Open.Data.Money.NationalCurrencyData", b =>
                {
                    b.Property<string>("CountryID");

                    b.Property<string>("CurrencyID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("CountryID", "CurrencyID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("NationalCurrency");
                });

            modelBuilder.Entity("Open.Data.Money.PaymentData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("CurrencyID");

                    b.Property<DateTime>("DateDue");

                    b.Property<DateTime>("DateMade");

                    b.Property<string>("PaymentMethodID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Open.Data.Money.PaymentMethodData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("CurrencyID");

                    b.Property<decimal>("DailyLimit");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Issue");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Organization");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("PaymentMethod");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PaymentMethodData");
                });

            modelBuilder.Entity("Open.Data.Money.RateData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyID");

                    b.Property<decimal>("Rate");

                    b.Property<string>("RateTypeID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("RateTypeID");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("Open.Data.Money.RateTypeData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("RateType");
                });

            modelBuilder.Entity("Open.Data.Party.AddressData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CityOrAreaCode");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("RegionOrStateOrCountryCode");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.Property<string>("ZipOrPostCodeOrExtension");

                    b.HasKey("ID");

                    b.ToTable("Address");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AddressData");
                });

            modelBuilder.Entity("Open.Data.Party.CountryData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Open.Data.Party.PartySignatureData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthenticationId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("PartySummaryId");

                    b.Property<string>("Resolution");

                    b.Property<string>("SignedEntityId");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.HasIndex("PartySummaryId");

                    b.ToTable("PartySignature");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PartySignatureData");
                });

            modelBuilder.Entity("Open.Data.Party.PartySummaryData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name");

                    b.Property<string>("PartyId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("RoleId");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("PartySummary");
                });

            modelBuilder.Entity("Open.Data.Party.TelecomDeviceRegistrationData", b =>
                {
                    b.Property<string>("AddressID");

                    b.Property<string>("DeviceID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("AddressID", "DeviceID");

                    b.HasIndex("DeviceID");

                    b.ToTable("TelecomDeviceRegistration");
                });

            modelBuilder.Entity("Open.Data.Quantity.MeasureData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Definition");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("Open.Data.Quantity.MeasureTermData", b =>
                {
                    b.Property<string>("MeasureID");

                    b.Property<string>("TermID");

                    b.Property<int>("Power");

                    b.HasKey("MeasureID", "TermID");

                    b.HasIndex("TermID");

                    b.ToTable("MeasureTerms");
                });

            modelBuilder.Entity("Open.Data.Quantity.SystemOfUnitsData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Definition");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("SystemsOfUnits");
                });

            modelBuilder.Entity("Open.Data.Quantity.UnitData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Definition");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("MeasureId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.HasIndex("MeasureId");

                    b.ToTable("Units");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UnitData");
                });

            modelBuilder.Entity("Open.Data.Quantity.UnitTermData", b =>
                {
                    b.Property<string>("UnitID");

                    b.Property<string>("TermID");

                    b.Property<int>("Power");

                    b.HasKey("UnitID", "TermID");

                    b.HasIndex("TermID");

                    b.ToTable("UnitTerms");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleContextData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<string>("RuleID");

                    b.Property<string>("RuleSetID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.HasIndex("RuleID");

                    b.HasIndex("RuleSetID");

                    b.ToTable("RuleContexts");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Rules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RuleData");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleElementData", b =>
                {
                    b.Property<string>("RuleID");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("RuleID", "Name", "ValidFrom");

                    b.ToTable("RuleElements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RuleElementData");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleSetData", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("RuleSets");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleUsageData", b =>
                {
                    b.Property<string>("RuleId");

                    b.Property<string>("RuleSetId");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("RuleId", "RuleSetId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("RuleUsages");
                });

            modelBuilder.Entity("Open.Sentry.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Open.Data.Money.CheckData", b =>
                {
                    b.HasBaseType("Open.Data.Money.PaymentMethodData");

                    b.Property<string>("Payee");

                    b.ToTable("PaymentMethod");

                    b.HasDiscriminator().HasValue("CheckData");
                });

            modelBuilder.Entity("Open.Data.Money.CreditCardData", b =>
                {
                    b.HasBaseType("Open.Data.Money.PaymentMethodData");

                    b.Property<decimal>("CreditLimit");

                    b.ToTable("PaymentMethod");

                    b.HasDiscriminator().HasValue("CreditCardData");
                });

            modelBuilder.Entity("Open.Data.Money.DebitCardData", b =>
                {
                    b.HasBaseType("Open.Data.Money.PaymentMethodData");


                    b.ToTable("PaymentMethod");

                    b.HasDiscriminator().HasValue("DebitCardData");
                });

            modelBuilder.Entity("Open.Data.Party.EmailAddressData", b =>
                {
                    b.HasBaseType("Open.Data.Party.AddressData");


                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("EmailAddressData");
                });

            modelBuilder.Entity("Open.Data.Party.GeographicAddressData", b =>
                {
                    b.HasBaseType("Open.Data.Party.AddressData");

                    b.Property<string>("CountryID");

                    b.HasIndex("CountryID");

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("GeographicAddressData");
                });

            modelBuilder.Entity("Open.Data.Party.TelecomAddressData", b =>
                {
                    b.HasBaseType("Open.Data.Party.AddressData");

                    b.Property<int>("Device");

                    b.Property<string>("NationalDirectDialingPrefix");

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("TelecomAddressData");
                });

            modelBuilder.Entity("Open.Data.Party.WebPageAddressData", b =>
                {
                    b.HasBaseType("Open.Data.Party.AddressData");


                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("WebPageAddressData");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleOverrideData", b =>
                {
                    b.HasBaseType("Open.Data.Party.PartySignatureData");

                    b.Property<string>("RuleContextId");

                    b.Property<string>("RuleSetId");

                    b.HasIndex("RuleContextId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("RuleOverrides");

                    b.HasDiscriminator().HasValue("RuleOverrideData");
                });

            modelBuilder.Entity("Open.Data.Quantity.UnitWithFactorData", b =>
                {
                    b.HasBaseType("Open.Data.Quantity.UnitData");

                    b.Property<double>("Factor");

                    b.ToTable("Units");

                    b.HasDiscriminator().HasValue("UnitWithFactorData");
                });

            modelBuilder.Entity("Open.Data.Quantity.UnitWithFunctionData", b =>
                {
                    b.HasBaseType("Open.Data.Quantity.UnitData");

                    b.Property<string>("FromBaseRuleID");

                    b.Property<string>("ToBaseRuleID");

                    b.ToTable("Units");

                    b.HasDiscriminator().HasValue("UnitWithFunctionData");
                });

            modelBuilder.Entity("Open.Data.Rule.ActiveRuleData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.RuleData");

                    b.Property<string>("RuleID");

                    b.HasIndex("RuleID");

                    b.ToTable("Rules");

                    b.HasDiscriminator().HasValue("ActiveRuleData");
                });

            modelBuilder.Entity("Open.Data.Rule.OperandData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.RuleElementData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("OperandData");
                });

            modelBuilder.Entity("Open.Data.Rule.OperatorData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.RuleElementData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("OperatorData");
                });

            modelBuilder.Entity("Open.Data.Rule.BaseVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.OperandData");

                    b.Property<string>("RuleContextID");

                    b.Property<string>("ValueAsString")
                        .HasColumnName("Value");

                    b.HasIndex("RuleContextID");

                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("BaseVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.BooleanVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.BaseVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("BooleanVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.DateTimeVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.BaseVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("DateTimeVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.DecimalVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.BaseVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("DecimalVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.DoubleVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.BaseVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("DoubleVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.IntegerVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.BaseVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("IntegerVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.VariableData<string>", b =>
                {
                    b.HasBaseType("Open.Data.Rule.BaseVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("VariableData<string>");
                });

            modelBuilder.Entity("Open.Data.Rule.StringVariableData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.VariableData<string>");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("StringVariableData");
                });

            modelBuilder.Entity("Open.Data.Rule.RuleErrorData", b =>
                {
                    b.HasBaseType("Open.Data.Rule.StringVariableData");


                    b.ToTable("RuleElements");

                    b.HasDiscriminator().HasValue("RuleErrorData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Open.Sentry.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Open.Sentry.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Open.Sentry.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Open.Sentry.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Open.Data.Money.NationalCurrencyData", b =>
                {
                    b.HasOne("Open.Data.Party.CountryData", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Money.CurrencyData", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Money.PaymentData", b =>
                {
                    b.HasOne("Open.Data.Money.CurrencyData", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Money.PaymentMethodData", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Money.PaymentMethodData", b =>
                {
                    b.HasOne("Open.Data.Money.CurrencyData", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Money.RateData", b =>
                {
                    b.HasOne("Open.Data.Money.CurrencyData", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID");

                    b.HasOne("Open.Data.Money.RateTypeData", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeID");
                });

            modelBuilder.Entity("Open.Data.Party.PartySignatureData", b =>
                {
                    b.HasOne("Open.Data.Party.PartySummaryData", "PartySummary")
                        .WithMany()
                        .HasForeignKey("PartySummaryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Party.TelecomDeviceRegistrationData", b =>
                {
                    b.HasOne("Open.Data.Party.GeographicAddressData", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Party.TelecomAddressData", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Quantity.MeasureTermData", b =>
                {
                    b.HasOne("Open.Data.Quantity.MeasureData", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Quantity.MeasureData", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Quantity.UnitData", b =>
                {
                    b.HasOne("Open.Data.Quantity.MeasureData", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Quantity.UnitTermData", b =>
                {
                    b.HasOne("Open.Data.Quantity.UnitData", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Quantity.UnitData", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Rule.RuleContextData", b =>
                {
                    b.HasOne("Open.Data.Rule.RuleData", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Rule.RuleSetData", "RuleSet")
                        .WithMany()
                        .HasForeignKey("RuleSetID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Rule.RuleElementData", b =>
                {
                    b.HasOne("Open.Data.Rule.RuleData", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Rule.RuleUsageData", b =>
                {
                    b.HasOne("Open.Data.Rule.RuleData", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Rule.RuleSetData", "RuleSet")
                        .WithMany()
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Party.GeographicAddressData", b =>
                {
                    b.HasOne("Open.Data.Party.CountryData", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Rule.RuleOverrideData", b =>
                {
                    b.HasOne("Open.Data.Rule.RuleContextData", "RuleContext")
                        .WithMany()
                        .HasForeignKey("RuleContextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Rule.RuleSetData", "RuleSet")
                        .WithMany()
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Rule.ActiveRuleData", b =>
                {
                    b.HasOne("Open.Data.Rule.RuleData", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Rule.BaseVariableData", b =>
                {
                    b.HasOne("Open.Data.Rule.RuleContextData", "RuleContext")
                        .WithMany()
                        .HasForeignKey("RuleContextID")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
